{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "(ansible:playbook:environment:cli): Prompts for which environment to use and then symlinks to it",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task ansible:playbook:environment:cli"
    },
    {
      "label": "(ansible:playbook:find-missing): Find roles that are missing files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task ansible:playbook:find-missing"
    },
    {
      "label": "(ansible:populate:dependencies): Attempt to automatically populate `meta/main.yml` and `requirements.yml`",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task ansible:populate:dependencies"
    },
    {
      "label": "(ansible:test:local): Run the Ansible play on the local machine (or via WSL - see task summary)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task ansible:test:local"
    },
    {
      "label": "(test:docker): Performs a full test, including a test for idempotency, on all available Linux systems using Docker",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task test:docker"
    },
    {
      "label": "(test:e2e): Runs a full E2E Molecule test for all supported operating systems",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task test:e2e"
    },
    {
      "label": "(test:virtualbox): Provisions a desktop VirtualBox VM and then runs a Molecule test",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task test:virtualbox"
    },
    {
      "label": "(test:vagrant): Runs the playbook using Vagrant",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task test:vagrant"
    },
    {
      "label": "(common:clean): Removes optional folders that are cached during various tasks",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:clean"
    },
    {
      "label": "(common:code:count): Display a chart detailing the lines of code for each language used",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:code:count"
    },
    {
      "label": "(common:code:find:todo): Scan code base for TODOs and FIXMEs",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:code:find:todo"
    },
    {
      "label": "(common:commit): Lint staged files, report spelling errors, and open a _required_ commit dialoge",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:commit"
    },
    {
      "label": "(common:prepare-release): Ensure the project has upstream changes, lint, and then update the version",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:prepare-release"
    },
    {
      "label": "(common:requirements): Ensure all the dependencies are installed (Node.js, Python, etc.)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:requirements"
    },
    {
      "label": "(common:reset): Resets the project by removing all caches and updating the project",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:reset"
    },
    {
      "label": "(common:reset-force): Aggressively reset the project (**WARNING** This will wipe uncommitted work)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:reset-force"
    },
    {
      "label": "(common:shell): Start a terminal session using Docker with any Linux operating system",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:shell"
    },
    {
      "label": "(common:update:man-page): Build `man` page from the README.md file",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task common:update:man-page"
    },
    {
      "label": "(update:modules): Ensure all submodules in the `.modules/` folder are updated",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task update:modules"
    },
    {
      "label": "(update:services): Update elements of the repository that require API access",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task update:services"
    },
    {
      "label": "(update): Refresh the project with the latest upstream code and ensure blueprint data has propagated",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task update"
    },
    {
      "label": "(docker:build): Build a regular Docker image and then generate a slim build from it",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task docker:build"
    },
    {
      "label": "(docker:build:fat): Build a Docker container from the Dockerfile",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task docker:build:fat"
    },
    {
      "label": "(docker:build:slim): Build a slim version of the Docker image",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task docker:build:slim"
    },
    {
      "label": "(fix:eslint): Fix JavaScript/TypeScript errors automatically",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:eslint"
    },
    {
      "label": "(fix:json): Alphabetically sort JSON",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:json"
    },
    {
      "label": "(fix:misc): Perform miscellaneous fixes such as removing BOM and ensuring LF line endings",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:misc"
    },
    {
      "label": "(fix:packer): Automatically fix and format Packer templates",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:packer"
    },
    {
      "label": "(fix:prettier): Automatically format most files using Prettier",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:prettier"
    },
    {
      "label": "(fix:python): Automatically format Python files using Black",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:python"
    },
    {
      "label": "(fix:shellcheck): (Experimental) Automatically apply fixes to .sh and .sh.j2 files using Shellcheck",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:shellcheck"
    },
    {
      "label": "(fix:xml): Autofix XML files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:xml"
    },
    {
      "label": "(fix:yaml): Autofix YML files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task fix:yaml"
    },
    {
      "label": "(git:remotes): Configure the git remote `origin` to point to GitLab and the git remote `all` to point to GitLab and GitHub",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task git:remotes"
    },
    {
      "label": "(git:remove:submodules): Remove all submodules in the current directory and optionally filter by RegEx",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task git:remove:submodules"
    },
    {
      "label": "(image:compress): Compress JPG/PNG images via TinyPNG",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task image:compress"
    },
    {
      "label": "(image:resize): Resize an image",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task image:resize"
    },
    {
      "label": "(lint:all): Lint with all available linters",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:all"
    },
    {
      "label": "(lint:ansible): Lint Ansible projects using Ansible Lint",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:ansible"
    },
    {
      "label": "(lint:docker): Lint Dockerfiles using Hadolint (requires Docker)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:docker"
    },
    {
      "label": "(lint:eslint): Lint with `eslint`",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:eslint"
    },
    {
      "label": "(lint:esprint:esprint): Lint with `eslint` across multiple threads",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:esprint:esprint"
    },
    {
      "label": "(lint:esprint:esprint:stop): Stop the `esprint` process that is currently running",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:esprint:esprint:stop"
    },
    {
      "label": "(lint:markdown:markdown): Lint markdown files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:markdown:markdown"
    },
    {
      "label": "(lint:markdown:markdown:links): Scan markdown files for broken links",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:markdown:markdown:links"
    },
    {
      "label": "(lint:packer): Validate the Packer templates ending with `template.json`",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:packer"
    },
    {
      "label": "(lint:prettier): Lint formatting using Prettier",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:prettier"
    },
    {
      "label": "(lint:prose:prose): Lint for English prose",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:prose:prose"
    },
    {
      "label": "(lint:python): Lint Python files using Flake8",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:python"
    },
    {
      "label": "(lint:shellcheck): Report possible errors in shell scripts",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:shellcheck"
    },
    {
      "label": "(lint:spelling): Checks for spelling errors in staged files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:spelling"
    },
    {
      "label": "(lint:toml): Lint TOML files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:toml"
    },
    {
      "label": "(lint:vagrant): Validate the Vagrantfile",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:vagrant"
    },
    {
      "label": "(lint:xml): Lint XML files",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:xml"
    },
    {
      "label": "(lint:yaml): Lint .yml files using YAML Lint",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task lint:yaml"
    },
    {
      "label": "(nest:benchmark): Initiate a web server benchmarking session (with `clinic`)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task nest:benchmark"
    },
    {
      "label": "(npm:build): Build the application",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:build"
    },
    {
      "label": "(npm:clean): Remove temporary folders that might conflicts with builds",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:clean"
    },
    {
      "label": "(npm:cov:open): Ensures the code coverage report is generated and opens it in a browser",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:cov:open"
    },
    {
      "label": "(npm:cov:upload): Uploads code coverage report to `codecov.io`",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:cov:upload"
    },
    {
      "label": "(npm:depcheck:dependencies): Remove unused dependencies",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:depcheck:dependencies"
    },
    {
      "label": "(npm:doc:html): Generate TypeDoc HTML documentation",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:doc:html"
    },
    {
      "label": "(npm:doc:json): Generate TypeDoc JSON documentation",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:doc:json"
    },
    {
      "label": "(npm:start): Run the application",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:start"
    },
    {
      "label": "(npm:start:inspect): Run the application in `watch` mode and open DevTools",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:start:inspect"
    },
    {
      "label": "(npm:start:prod): Run the application in `production` mode",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:start:prod"
    },
    {
      "label": "(npm:start:prod:inspect): Run the application in `production` and `watch` mode and open DevTools",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:start:prod:inspect"
    },
    {
      "label": "(npm:test): Run the unit tests for an NPM project",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:test"
    },
    {
      "label": "(npm:test:coverage): Generate code coverage assets",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:test:coverage"
    },
    {
      "label": "(npm:test:dashboard): Run and manage test cases from a web interface (powered by `majestic`)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:test:dashboard"
    },
    {
      "label": "(npm:test:debug): Debug tests in `watch` mode",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:test:debug"
    },
    {
      "label": "(npm:test:inspect): Debug tests with DevTools in `watch` mode",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:test:inspect"
    },
    {
      "label": "(npm:typesync): Install missing type definitions",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task npm:typesync"
    },
    {
      "label": "(packer:build:all): Build Packer images for all platforms (default setting uses `template.json`)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task packer:build:all"
    },
    {
      "label": "(packer:build:kvm): Build a Packer image for KVM",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task packer:build:kvm"
    },
    {
      "label": "(packer:build:parallels): Build a Packer image for Parallels",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task packer:build:parallels"
    },
    {
      "label": "(packer:build:virtualbox): Build a Packer image for VirtualBox",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task packer:build:virtualbox"
    },
    {
      "label": "(packer:build:vmware): Build a Packer image for VMWare",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task packer:build:vmware"
    },
    {
      "label": "(publish:android:beta): Publishes Android app to Firebase beta channel",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:android:beta"
    },
    {
      "label": "(publish:android:release): Publishes Android app to Google Play",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:android:release"
    },
    {
      "label": "(publish:app:beta): Publish a beta release of all the release targets",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:app:beta"
    },
    {
      "label": "(publish:app:release): Publish a production release of all the targets",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:app:release"
    },
    {
      "label": "(publish:brew:cask): Publishes a Homebrew Cask",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:brew:cask"
    },
    {
      "label": "(publish:brew:formula): Publishes a Homebrew Formula",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:brew:formula"
    },
    {
      "label": "(publish:chrome:release): Publishes Chrome extension",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:chrome:release"
    },
    {
      "label": "(publish:ios:beta): Publishes iOS app to Firebase beta channel",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:ios:beta"
    },
    {
      "label": "(publish:ios:release): Publishes iOS app to iTunes",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:ios:release"
    },
    {
      "label": "(publish:opera:release): Publishes Opera extension",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task publish:opera:release"
    },
    {
      "label": "(python:build): Build the project",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task python:build"
    },
    {
      "label": "(python:build:binary): Build standalone binary",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task python:build:binary"
    },
    {
      "label": "(python:publish): Publish the project to PyPi.org",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task python:publish"
    },
    {
      "label": "(python:run): Runs the project by calling `run.py`",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task python:run"
    },
    {
      "label": "(python:test): Runs tests with `pytest` after fixing and linting",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task python:test"
    },
    {
      "label": "(security:bandit): Check for Python code security issues",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:bandit"
    },
    {
      "label": "(security:dockle): Analyze and lint the Docker container using Dockle",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:dockle"
    },
    {
      "label": "(security:gitleaks): Scans repository (including git history) for possible leaked keys",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:gitleaks"
    },
    {
      "label": "(security:private-keys): Scan for private keys",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:private-keys"
    },
    {
      "label": "(security:snyk): Analyze the Docker container for security vulnerabilities with Snyk (requires login)",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:snyk"
    },
    {
      "label": "(security:trivy): Analyze the Docker container for security vulnerabilities with Trivy",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task security:trivy"
    },
    {
      "label": "(start): Set up the project and refresh it with the latest changes",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task start"
    },
    {
      "label": "(symlink:playbook): Symlink all the roles in the roles/ folder to ~/.ansible/roles",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task symlink:playbook"
    },
    {
      "label": "(symlink:role): Symlink the current role to ~/.ansible/roles/.",
      "type": "shell",
      "command": "bash .config/scripts/vscode.sh && task symlink:role"
    }
  ]
}
