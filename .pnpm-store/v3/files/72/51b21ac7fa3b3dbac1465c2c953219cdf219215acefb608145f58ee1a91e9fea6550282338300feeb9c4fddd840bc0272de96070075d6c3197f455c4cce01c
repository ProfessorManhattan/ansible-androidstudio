{"version":3,"sources":["../../src/rules/matchName.js"],"names":["context","jsdoc","report","info","lastIndex","utils","match","options","allowName","disallowName","replacement","tags","allowNameRegex","getRegexFromString","disallowNameRegex","applicableTags","includes","getPresentTags","reported","tag","allowed","test","name","disallowed","hasRegex","fixer","source","tokens","replace","message","reportJSDoc","undefined","matchContext","meta","docs","description","url","fixable","schema","additionalProperies","properties","items","type","comment","required"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\n// eslint-disable-next-line complexity\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  report,\n  info: {lastIndex},\n  utils,\n}) => {\n  const {match} = context.options[0] || {};\n  if (!match) {\n    report('Rule `no-restricted-syntax` is missing a `match` option.');\n\n    return;\n  }\n\n  const {\n    allowName,\n    disallowName,\n    replacement,\n    tags = ['*'],\n  } = match[lastIndex];\n\n  const allowNameRegex = allowName && utils.getRegexFromString(allowName);\n  const disallowNameRegex = disallowName && utils.getRegexFromString(disallowName);\n\n  let applicableTags = jsdoc.tags;\n  if (!tags.includes('*')) {\n    applicableTags = utils.getPresentTags(tags);\n  }\n\n  let reported = false;\n  for (const tag of applicableTags) {\n    const allowed = !allowNameRegex || allowNameRegex.test(tag.name);\n    const disallowed = disallowNameRegex && disallowNameRegex.test(tag.name);\n    const hasRegex = allowNameRegex || disallowNameRegex;\n    if (hasRegex && allowed && !disallowed) {\n      continue;\n    }\n\n    if (!hasRegex && reported) {\n      continue;\n    }\n\n    const fixer = () => {\n      tag.source[0].tokens.name = tag.source[0].tokens.name.replace(\n        disallowNameRegex, replacement,\n      );\n    };\n\n    let {message} = match[lastIndex];\n    if (!message) {\n      if (hasRegex) {\n        message = disallowed ?\n          `Only allowing names not matching \\`${disallowNameRegex}\\` but found \"${tag.name}\".` :\n          `Only allowing names matching \\`${allowNameRegex}\\` but found \"${tag.name}\".`;\n      } else {\n        message = `Prohibited context for \"${tag.name}\".`;\n      }\n    }\n\n    utils.reportJSDoc(\n      message,\n      hasRegex ? tag : null,\n\n      // We could match up\n      disallowNameRegex && replacement !== undefined ?\n        fixer :\n        null,\n      false,\n      {\n        // Could also supply `context`, `comment`, `tags`\n        allowName,\n        disallowName,\n        name: tag.name,\n      },\n    );\n    if (!hasRegex) {\n      reported = true;\n    }\n  }\n}, {\n  matchContext: true,\n  meta: {\n    docs: {\n      description: 'Reports the name portion of a JSDoc tag if matching or not matching a given regular expression.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-match-name',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          match: {\n            additionalProperies: false,\n            items: {\n              properties: {\n                allowName: {\n                  type: 'string',\n                },\n                comment: {\n                  type: 'string',\n                },\n                context: {\n                  type: 'string',\n                },\n                disallowName: {\n                  type: 'string',\n                },\n                message: {\n                  type: 'string',\n                },\n                tags: {\n                  items: {\n                    type: 'string',\n                  },\n                  type: 'array',\n                },\n              },\n              type: 'object',\n            },\n            type: 'array',\n          },\n        },\n        required: ['match'],\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"matchName.js"}