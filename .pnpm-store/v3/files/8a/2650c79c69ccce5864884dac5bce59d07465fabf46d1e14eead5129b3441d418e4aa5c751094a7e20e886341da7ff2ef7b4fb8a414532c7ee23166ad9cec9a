{"version":3,"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"names":["sourceCode","utils","report","context","jsdoc","jsdocNode","mainCircumstance","tags","options","checkHyphens","jsdocTag","targetTagName","circumstance","always","desc","getTagDescription","trim","startsWithHyphen","test","fixer","lineIndex","line","sourceLines","getText","split","description","descriptionIndex","lastIndexOf","replacementLine","slice","splice","replacement","join","replaceText","unwantedPart","exec","replace","length","forEachPreferredTag","tagEntries","Object","entries","tagName","preferredParamTag","getPreferredTagName","tag","some","tagNme","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","type","additionalProperties","properties","anyOf","patternProperties"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  utils,\n  report,\n  context,\n  jsdoc,\n  jsdocNode,\n}) => {\n  const [mainCircumstance, {tags} = {}] = context.options;\n\n  const checkHyphens = (jsdocTag, targetTagName, circumstance = mainCircumstance) => {\n    const always = !circumstance || circumstance === 'always';\n    const desc = utils.getTagDescription(jsdocTag);\n    if (!desc.trim()) {\n      return;\n    }\n\n    const startsWithHyphen = (/^\\s*-/u).test(desc);\n    if (always) {\n      if (!startsWithHyphen) {\n        report(`There must be a hyphen before @${targetTagName} description.`, (fixer) => {\n          const lineIndex = jsdocTag.line;\n          const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n          // Get start index of description, accounting for multi-line descriptions\n          const description = desc.split('\\n')[0];\n          const descriptionIndex = sourceLines[lineIndex].lastIndexOf(description);\n\n          const replacementLine = sourceLines[lineIndex]\n            .slice(0, descriptionIndex) + '- ' + description;\n          sourceLines.splice(lineIndex, 1, replacementLine);\n          const replacement = sourceLines.join('\\n');\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else if (startsWithHyphen) {\n      report(`There must be no hyphen before @${targetTagName} description.`, (fixer) => {\n        const [unwantedPart] = /^\\s*-\\s*/u.exec(desc);\n\n        const replacement = sourceCode\n          .getText(jsdocNode)\n          .replace(desc, desc.slice(unwantedPart.length));\n\n        return fixer.replaceText(jsdocNode, replacement);\n      }, jsdocTag);\n    }\n  };\n\n  utils.forEachPreferredTag('param', checkHyphens);\n  if (tags) {\n    const tagEntries = Object.entries(tags);\n    for (const [tagName, circumstance] of tagEntries) {\n      if (tagName === '*') {\n        const preferredParamTag = utils.getPreferredTagName({tagName: 'param'});\n        for (const {tag} of jsdoc.tags) {\n          if (tag === preferredParamTag || tagEntries.some(([tagNme]) => {\n            return tagNme !== '*' && tagNme === tag;\n          })) {\n            continue;\n          }\n\n          utils.forEachPreferredTag(tag, (jsdocTag, targetTagName) => {\n            checkHyphens(jsdocTag, targetTagName, circumstance);\n          });\n        }\n\n        continue;\n      }\n\n      utils.forEachPreferredTag(tagName, (jsdocTag, targetTagName) => {\n        checkHyphens(jsdocTag, targetTagName, circumstance);\n      });\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires a hyphen before the `@param` description.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        enum: ['always', 'never'],\n        type: 'string',\n      },\n      {\n        additionalProperties: false,\n        properties: {\n          tags: {\n            anyOf: [\n              {\n                patternProperties: {\n                  '.*': {\n                    enum: ['always', 'never'],\n                    type: 'string',\n                  },\n                },\n                type: 'object',\n              },\n              {\n                enum: ['any'],\n                type: 'string',\n              },\n            ],\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"file":"requireHyphenBeforeParamDescription.js"}