// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pre ++ 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre ++ and + unary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Pre {
          "kind": "pre",
          "parenthesizedExpression": true,
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre ++ and - unary (with parens) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Pre {
          "kind": "pre",
          "parenthesizedExpression": true,
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre ++ and - unary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre ++ and parens 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "parenthesizedExpression": true,
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre -- 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "type": "-",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre -- and + unary (with parens) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Pre {
          "kind": "pre",
          "parenthesizedExpression": true,
          "type": "-",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre -- and + unary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Pre {
          "kind": "pre",
          "type": "-",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre -- and parens 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "parenthesizedExpression": true,
        "type": "-",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`pre -- and unary - 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Pre {
          "kind": "pre",
          "parenthesizedExpression": true,
          "type": "-",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
