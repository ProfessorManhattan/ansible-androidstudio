export declare const ruleState: {
    error: number;
    off: number;
    warn: number;
};
export declare const baseRules: (repoType: string, repoSubType: string) => {
    'array-func/prefer-array-from': string;
    'arrow-parens': string[];
    'brace-style': string[];
    'comma-dangle': string;
    'editorconfig/indent': string;
    eqeqeq: string[];
    'eslint-comments/disable-enable-pair': (string | {
        allowWholeFile: boolean;
    })[];
    'ext/lines-between-object-properties': (string | number)[];
    'filenames/match-regex': (string | number)[];
    'filenames/no-index': number;
    'fp/no-class': string;
    'fp/no-let': string;
    'fp/no-mutating-methods': string;
    'fp/no-mutation': (string | {
        allowThis: boolean;
        commonjs: boolean;
        exceptions: never[];
    })[];
    'fp/no-nil': string;
    'fp/no-rest-parameters': string;
    'fp/no-this': string;
    'fp/no-unused-expression': string;
    'func-style': (string | {
        allowArrowFunctions: boolean;
    })[];
    'functional/functional-parameters': (string | {
        enforceParameterCount: boolean;
    })[];
    'functional/immutable-data': (string | {
        ignoreAccessorPattern: string[];
        ignoreImmediateMutation: boolean;
    })[];
    'functional/no-class': string;
    'functional/no-conditional-statement': string;
    'functional/no-expression-statement': string;
    'functional/no-return-void': string;
    'functional/no-this-expression': string;
    'id-blacklist': string[];
    'import/no-extraneous-dependencies': (string | {
        devDependencies: boolean;
        optionalDependencies: string[];
        peerDependencies: boolean;
    })[];
    'import/no-unresolved': (number | {
        ignore: string[];
    })[];
    'jest/require-hook': string;
    'linebreak-style': string[];
    'max-classes-per-file': (string | number)[];
    'max-len': (string | {
        code: number;
        ignoreComments: boolean;
        ignoreTrailingComments: boolean;
    })[];
    'max-statements': (string | number | {
        ignoreTopLevelFunctions: boolean;
    })[];
    'newline-per-chained-call': string;
    'no-array-constructor': string;
    'no-console': (string | {
        allow: string[];
    })[];
    'no-constructor-bind/no-constructor-bind': string;
    'no-constructor-bind/no-constructor-state': string;
    'no-empty-function': (string | {
        allow: string[];
    })[];
    'no-loops/no-loops': number;
    'no-magic-numbers': (string | {
        ignore: number[];
    })[];
    'no-multiple-empty-lines': (string | {
        max: number;
    })[];
    'no-plusplus': (string | {
        allowForLoopAfterthoughts: boolean;
    })[];
    'no-restricted-syntax': string[];
    'no-shadow': string[];
    'no-ternary': string;
    'no-unused-expressions': (string | {
        allowTernary: boolean;
    })[];
    'no-unused-vars': (string | {
        argsIgnorePattern: string;
    })[];
    'node/no-extraneous-import': string;
    'node/no-missing-import': (string | {
        allowModules: string[];
    })[];
    'node/no-unpublished-import': string;
    'one-var': string[];
    'padding-line-between-statements': (string | {
        blankLine: string;
        next: string;
        prev: string;
    })[];
    'prefer-arrow/prefer-arrow-functions': (string | {
        allowStandaloneDeclarations: boolean;
        classPropertiesAllowed: boolean;
        disallowPrototype: boolean;
        singleReturnOnly: boolean;
    })[];
    'quote-props': string[];
    'require-jsdoc': (string | {
        require: {
            ArrowFunctionExpression: boolean;
            ClassDeclaration: boolean;
            FunctionDeclaration: boolean;
            FunctionExpression: boolean;
            MethodDefinition: boolean;
        };
    })[];
    'sort-class-members/sort-class-members': (number | {
        accessorPairPositioning: string;
        order: string[];
    })[];
    'sort-imports': string;
    'sort-keys': string;
    'sort-keys-fix/sort-keys-fix': string;
    'spaced-comment': (string | {
        markers: string[];
    })[];
    'unicorn/prefer-module': number;
    'unused-imports/no-unused-imports': string;
    'woke/all': number;
};
