"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = (0, tslib_1.__importStar)(require("node:fs"));
var constants_1 = require("./constants");
var library_1 = require("./library");
var ansible_1 = require("./rules/ansible");
var base_1 = require("./rules/base");
var gitlab_ci_1 = require("./rules/gitlab-ci");
var javascript_1 = require("./rules/javascript");
var json_1 = require("./rules/json");
var taskfile_1 = require("./rules/taskfile");
var ts_spec_1 = require("./rules/ts-spec");
var typescript_1 = require("./rules/typescript");
var yaml_1 = require("./rules/yaml");
var gitignore = (0, library_1.getGitignore)();
var taskfile = (0, library_1.acquireProjectType)();
var repoType = taskfile.vars.REPOSITORY_TYPE;
var repoSubType = taskfile.vars.REPOSITORY_SUBTYPE;
var tsConfig = fs.existsSync('./tsconfig.json')
    ? {
        extends: (0, library_1.getExtends)('typescript', repoType, repoSubType),
        files: ['*.ts', '*.tsx'],
        parser: '@typescript-eslint/parser',
        parserOptions: {
            project: 'tsconfig.json',
            sourceType: 'module'
        },
        plugins: (0, library_1.getPlugins)('typescript', repoType, repoSubType),
        rules: (0, base_1.baseRules)(repoType, repoSubType)
    }
    : { files: ['.doesnotexist'] };
module.exports = {
    env: {
        browser: repoType === 'angular',
        es6: true,
        node: repoType === 'npm'
    },
    ignorePatterns: (0, tslib_1.__spreadArray)([
        '!.*',
        '.common/',
        '.modules/',
        '.pnpm-store/',
        '.venv/',
        'deprecated/',
        'angular.json',
        'package-lock.json',
        'pnpm-lock.yaml',
        'venv/',
        '_generated_/',
        '*.toml'
    ], gitignore, true),
    overrides: [
        {
            extends: (0, library_1.getExtends)('json', repoType, repoSubType),
            files: ['*.json', '*.json5', '*.json.handlebars'],
            parser: 'jsonc-eslint-parser',
            plugins: (0, library_1.getPlugins)('json', repoType, repoSubType),
            rules: json_1.jsonRules
        },
        {
            files: ['package.json', 'package.*.json.handlebars'],
            rules: {
                'jsonc/sort-keys': [
                    'error',
                    {
                        order: { type: 'asc' },
                        pathPattern: 'keywords'
                    },
                    {
                        order: { type: 'asc' },
                        pathPattern: 'lint-staged'
                    }
                ]
            }
        },
        {
            files: ['.vscode/tasks.json'],
            rules: {
                'jsonc/sort-keys': [
                    'error',
                    {
                        order: library_1.vscodeTasksOrder,
                        pathPattern: '^.*$'
                    }
                ]
            }
        },
        {
            extends: (0, library_1.getExtends)('toml', repoType, repoSubType),
            files: ['*.toml'],
            parser: 'toml-eslint-parser',
            plugins: (0, library_1.getPlugins)('toml', repoType, repoSubType)
        },
        tsConfig,
        {
            extends: (0, library_1.getExtends)('javascript', repoType, repoSubType),
            files: ['*.js', '*.jsx'],
            plugins: (0, library_1.getPlugins)('javascript', repoType, repoSubType),
            rules: (0, base_1.baseRules)(repoType, repoSubType)
        },
        {
            env: {
                jest: true
            },
            files: ['*spec.js', '*spec.ts'],
            rules: ts_spec_1.specRules
        },
        {
            files: ['*.js', '*.jsx'],
            rules: javascript_1.jsRules
        },
        {
            files: ['*.ts', '*.tsx'],
            rules: typescript_1.tsRules
        },
        {
            files: ['*.func.js', '*.func.ts'],
            rules: {
                'fp/no-nil': 'error',
                'functional/no-class': 'error',
                'functional/no-conditional-statement': 'error',
                'functional/no-expression-statement': 'error',
                'functional/no-return-void': 'error',
                'functional/no-this-expression': 'error'
            }
        },
        {
            extends: (0, library_1.getExtends)('yml', repoType, repoSubType),
            files: ['*.yaml', '*.yml'],
            parser: 'yaml-eslint-parser',
            plugins: (0, library_1.getPlugins)('yml', repoType, repoSubType),
            rules: yaml_1.yamlRules
        },
        {
            files: ['defaults/*.yml', 'molecule/**/molecule.yml', 'vars/*.yml'],
            rules: {
                'yml/no-empty-document': 'off',
                'yml/sort-keys': [
                    'error',
                    {
                        order: { type: 'asc' },
                        pathPattern: '.*'
                    }
                ]
            }
        },
        {
            files: ['molecule/**/converge.yml', 'molecule/**/prepare.yml', 'tests/**/*.yml'],
            rules: ansible_1.ansibleRules
        },
        {
            files: ['meta/main.yml'],
            rules: ansible_1.ansibleMetaRules
        },
        {
            files: ['Taskfile*.yml'],
            rules: taskfile_1.taskfileRules
        },
        {
            files: ['./Taskfile.yml'],
            rules: {
                'max-len': 'off'
            }
        },
        {
            files: ['*.gitlab-ci.yml'],
            rules: gitlab_ci_1.gitlabCIRules
        },
        {
            files: ['tasks.json', 'launch.json'],
            rules: {
                'max-lines': ['error', constants_1.maxLinesMax]
            }
        },
        {
            files: ['angular.json'],
            rules: {
                'json-schema-validator/no-invalid': 'off'
            }
        }
    ],
    reportUnusedDisableDirectives: true,
    rules: {
        'json-schema-validator/no-invalid': [
            'error',
            {
                schemas: (0, library_1.schemaDefinitions)(),
                useSchemastoreCatalog: true
            }
        ],
        'max-lines': ['error', constants_1.maxLines],
        'no-secrets/no-secrets': [
            'warn',
            {
                ignoreContent: [
                    'allowSyntheticDefaultImports',
                    '__zone_symbol__UNPATCHED_EVENTS',
                    'enableI18nLegacyMessageIdFormat',
                    'noFallthroughCasesInSwitch',
                    'noPropertyAccessFromIndexSignature',
                    'T01ABCG4NK1',
                    'ansible_galaxy_project_id'
                ]
            }
        ]
    }
};
//# sourceMappingURL=main.js.map