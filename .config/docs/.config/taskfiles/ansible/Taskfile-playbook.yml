---
version: '3'

tasks:
  environment:
    cmds:
      - task: environment:{{if .CLI_ARGS}}cli{{else}}prompt{{end}}

  environment:cli:
    desc: Prompts for which environment to use and then symlinks to it
    summary: |
      # Switch environments using an interactive dialogue

      Ansible does not really provide any great ways to switch between environments (or sets of
      `host_vars/`, `group_vars/` etc.). If you place all the files and folders you wish to constitute
      as an environment inside a folder named as the name of the environment then you can use
      this task to handle the symlinking and switching between environments.

      **Example of opening the interactive prompt:**
      `task ansible:environment`

      **You can directly switch enironments to `environments/prod/` by running:**
      `task ansible:environment -- prod`
    cmds:
      - |
        {{if .CLI_ARGS}}
          for ITEM in environments/{{.CLI_ARGS}}/*; do
            if [ -d "$ITEM" ] || [ -f "$ITEM" ]; then
              true info "Skipping environments/{{.CLI_ARGS}}/$ITEM because it already exists as a file/folder in the root of the project."
            else
              rm -f $ITEM
              ln -s "./environments/{{.CLI_ARGS}}/$ITEM" "$ITEM"
            fi
          done
        {{end}}

  environment:prompt:
    deps:
      - :install:modules:local
    env:
      ENVIRONMENT:
        sh: node .common/scripts/prompts/environment.js
    cmds:
      - |
        if [ ! -z "$ENVIRONMENT" ]; then
          for ITEM in "environments/$ENVIRONMENT/*"; do
            if [ -d "$ITEM" ] || [ -f "$ITEM" ]; then
              true info 'Skipping `environments/'"$ENVIRONMENT/$ITEM"'` because it already exists as a file/folder in the root of the project.'
            else
              rm -f $ITEM
              ln -s "./environments/$ENVIRONMENT/$ITEM" "$ITEM"
            fi
          done
        fi
    status:
      - '[[ -z "{{.CLI_ARGS}}" ]]'

    preconditions:
      - sh: test -d node_modules
        msg: This task has dependencies in the `node_modules` folder which is missing.

  find-missing:
    desc: Find roles that are missing files
    summary: |
      # Find roles that are missing any given file

      This task scans through all the folders in the roles/ directory and checks
      for the presence of a file that you pass in through the CLI.

      **Example usage:**
      `task find-missing -- logo.png`

      The example above will look through all the folders two levels deep (e.g. `./roles/tools/nmap`,
      `./roles/system/snapd`) in the roles folder and display any roles that are missing the file.
    cmds:
      - |
        FILES=$(find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/{{.CLI_ARGS}}" ';' -print)
        true log info 'Found '"$(echo "$FILES" | wc -l | xargs)"' roles missing {{.CLI_ARGS}}'
        echo "$FILES"
    preconditions:
      - sh: test -d roles
        msg: The `roles/` folder is missing. Is the project set up right?
