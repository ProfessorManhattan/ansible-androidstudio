---
version: '3'

vars:
  DOCKER_IMAGE:
    sh: |
      {{if .CLI_ARGS}}{{.DOCKERHUB_PROFILE}}/{{.CLI_ARGS}}{{else}}jq -r '.name' package.json | sed 's/^@//'{{end}}
  SLIM_ENABLED:
    sh: jq -r '.blueprint.slimBuildEnabled' package.json | sed 's/null/false/'

tasks:
  build:
    desc: Build a regular Docker image and then generate a slim build from it
    hide:
      sh: '[ ! -f Dockerfile ]'
    cmds:
      - |
        if [ -f Dockerfile.test.yml ]; then
          task docker:build:fat
          task docker:build:slim
        fi
      - |
        for TESTFILE in Dockerfile-*.test.yml; do
          TEST_IMAGE_SLUG="$(echo $TESTFILE | sed 's/^Dockerfile-//' | sed 's/.test.yml$//')"
          task docker:build:fat -- "$TEST_IMAGE_SLUG"
          task docker:build:slim -- "$TEST_IMAGE_SLUG"
        done

  login:
    deps:
      - :install:software:docker
    log:
      error: Failed to authenticate `{{.DOCKERHUB_USER}}` with the DockerHub registry
      start: Logging into DockerHub registry with `{{.DOCKERHUB_USER}}`
      success: Authenticated to DockerHub registry with `{{.DOCKERHUB_USER}}`
    cmds:
      - echo "$DOCKERHUB_REGISTRY_PASSWORD" | docker login -u {{.DOCKERHUB_USER}} --password-stdin
    preconditions:
      - test -n "$DOCKERHUB_REGISTRY_PASSWORD"

  prepare:
    cmds:
      - task: build

  publish:
    deps:
      - :install
    cmds:
      - |
        if [ -f Dockerfile.test.yml ]; then
          task docker:publish:images
        fi
      - |
        for TESTFILE in Dockerfile-*.test.yml; do
          TEST_IMAGE_SLUG="$(echo $TESTFILE | sed 's/^Dockerfile-//' | sed 's/.test.yml$//')"
          task docker:publish:images -- "$TEST_IMAGE_SLUG"
        done

  publish:image:
    log:
      error: Failed to tag / push `{{.DOCKER_IMAGE}}:{{.TARGET_TAG}}`
      start: Tagging and pushing `{{.DOCKER_IMAGE}}:{{.TARGET_TAG}}`
      success: Finished uploading `{{.DOCKER_IMAGE}}:{{.TARGET_TAG}}`
    cmds:
      - docker tag {{.DOCKER_IMAGE}}:{{.SOURCE_TAG}} {{.DOCKER_IMAGE}}:{{.TARGET_TAG}}
      - docker push {{.DOCKER_IMAGE}}:{{.TARGET_TAG}}
    status:
      - if [[ '{{.SOURCE_TAG}}' == 'slim' ]]; then [[ '{{.SLIM_ENABLED}}' == 'false' ]]; fi

  publish:images:
    vars:
      MAJOR_VERSION:
        sh: jq -r '.version' package.json | sed 's/\..*\..*$//'
      VERSION:
        sh: jq -r ".version" package.json
    log:
      error: An error occurred while publishing the Docker images
      start: Publishing Docker images
      success: Finished uploading all Docker images
    cmds:
      - task: publish:image
        vars:
          SOURCE_TAG: latest
          TARGET_TAG: '{{.VERSION}}'
      - task: publish:image
        vars:
          SOURCE_TAG: latest
          TARGET_TAG: '{{.MAJOR_VERSION}}-latest'
      - task: publish:image
        vars:
          SOURCE_TAG: latest
          TARGET_TAG: latest
      - task: publish:image
        vars:
          SOURCE_TAG: slim
          TARGET_TAG: '{{.VERSION}}-slim'
      - task: publish:image
        vars:
          SOURCE_TAG: slim
          TARGET_TAG: '{{.MAJOR_VERSION}}-slim'
      - task: publish:image
        vars:
          SOURCE_TAG: slim
          TARGET_TAG: slim
      - task: pushrm

  pushrm:
    deps:
      - :install:github:docker-pushrm
      - :install:software:docker
    vars:
      DOCKERHUB_DESCRIPTION:
        sh: jq -r '.description' package.json
    cmds:
      - docker pushrm {{.DOCKER_IMAGE}}
      - docker pushrm --short '{{.DOCKERHUB_DESCRIPTION}}' {{.DOCKER_IMAGE}}

  shell:
    deps:
      - :install:software:docker
      - :install:software:jq
    interactive: true
    desc: Open the terminal of an existing Docker image
    summary: |
      # Shell into Docker Image

      This task will start a shell session with one of the Docker images
      that are currently present on machine. The task looks at the output
      from `docker images` and filters the list based on the project's
      expected DockerHub slug or a string, if you pass in CLI arguments.

      **Displays a list of images that match the name in package.json:**
      `task docker:shell`

      **Displays a list of images that have the pattern abc in their name:**
      `task docker:shell -- 'abc'`
    vars:
      IMAGE_OPTIONS:
        sh: docker images | grep {{.DOCKER_IMAGE}} | sed 's/^\([^ ]*\).*$/\1/' | jq -Rsc 'split("\n")' | jq 'del(.[-1])'
    prompt:
      type: select
      message: Which Docker image would you like to shell into?
      options: '{{.IMAGE_OPTIONS}}'
      answer:
        cmds:
          - docker run -v "${PWD}:/work" -w /work -it --entrypoint /bin/sh --rm {{.ANSWER}}

  test:
    deps:
      - :install:software:docker
    desc: Perform all available tests on the Docker image
    summary: |
      # Test the Dockerfile

      This task will run the [container-structure-test](https://github.com/GoogleContainerTools/container-structure-test)
      if the `Dockerfile-test.yml` file is present. Then, if the `dockerSlimCommand` is present in the
      `blueprint` section of `package.json`, the output from running `npm run test:dockerslim` on every project/folder
      in the `test-output/` folder will be compared. The comparison will ensure that the `slim` output matches the `latest`
      output. Each folder in the `test-output/` folder must have a `package.json` file present with the `test:dockerslim`
      script defined under `scripts`.
    cmds:
      - |
        if [ -f Dockerfile.test.yml ]; then
          task docker:test:container-structure-test
          task docker:test:output
        fi
      - |
        for TESTFILE in Dockerfile-*.test.yml; do
          TEST_IMAGE_SLUG="$(echo $TESTFILE | sed 's/^Dockerfile-//' | sed 's/.test.yml$//')"
          task docker:test:container-structure-test -- "$TEST_IMAGE_SLUG"
          task docker:test:output -- "$TEST_IMAGE_SLUG"
        done

  verify:
    cmds:
      - task: login

  version:software:
    cmds:
      - |
        if grep -q "CMD.\[\"--version\"\]" Dockerfile; then
          VERSION=$(docker run --cap-drop=ALL -e PY_COLORS=0 --rm {{.DOCKER_IMAGE}}:latest | perl \
            -pe 'if(($v)=/([0-9]+([.][0-9]+)+)/){print"$v";exit}$_=""')
          if [[ $VERSION == *.*.* ]]; then
            echo $VERSION
          elif [[ $VERSION == *.* ]]; then
            echo $VERSION.0
          fi
        fi
