---
version: '3'

tasks:
  clean:
    deps:
      - :install:software:rsync
    desc: Removes optional folders that are cached during various tasks
    summary: |
      # Clean the project and remove all optional caches

      This task will remove all the unnecessary files that are downloaded, generated, and
      cached during various build steps. This task is used by the `task common:reset` task
      which will re-generate the project from scratch. Ideally, this task and the reset task
      should never be necessary. The `common:update` task should be used instead.
    vars:
      CLEAN_TARGETS: .autodoc .task .venv node_modules
      RANDOM_STRING:
        sh: openssl rand -hex 14
    log:
      error: Error removing `{{.CLEAN_TARGETS}}`
      start: Removing `{{.CLEAN_TARGETS}}`
      success: Removed `{{.CLEAN_TARGETS}}`
    cmds:
      - mkdir -p '/tmp/{{.RANDOM_STRING}}'
      - mkdir -p '/tmp/{{.RANDOM_STRING}}-empty'
      - |
        for TMP_FILE in {{.CLEAN_TARGETS}}; do
          if [ -d "$TMP_FILE" ]; then
            mv "$TMP_FILE" "/tmp/{{.RANDOM_STRING}}/$TMP_FILE" 2> /dev/null
            (rsync -a --delete '/tmp/{{.RANDOM_STRING}}-empty' "/tmp/{{.RANDOM_STRING}}/$TMP_FILE" && rm -rf "/tmp/{{.RANDOM_STRING}}-$TMP_FILE") &
          fi
        done
        wait

  commit:
    deps:
      - :install:modules:local
      - :install:npm:commitizen
      - :install:npm:commitlint
      - :install:python:requirements
    desc: Lint staged files, report spelling errors, and open a _required_ commit dialoge
    summary: |
      # Commit code

      This task will perform linting and auto-fixing on the files that have been staged in
      git (i.e. the files that were added with `git add --all`). It will then report possible
      spelling errors that you may choose to fix. Then, it opens a _required_ interactive commit
      questionnaire that will help you make better commits that are compatible with software
      that generates the CHANGELOG.md.

      It is very important that you use this task to commit rather than the conventional approach
      using `git commit -m`. However, if you really need to, you can add the flag `--no-verify`
      to your regular `git commit -m` command to bypass the pre-commit hook.
    log:
      start: Initiating commit dialog
    cmds:
      - . ./.config/husky/pre-commit
      - exec < /dev/tty && git cz --hook || true

  husky:
    deps:
      - :install:modules:local
      - :install:npm:commitizen
      - :install:npm:commitlint
      - :install:npm:husky
    cmds:
      - task: husky:install
      - task: husky:permissions
    status:
      - '[[ "${container:=}" == "docker" ]]'

  husky:ci:
    cmds:
      - task: husky:permissions
    status:
      - '[[ "${container:=}" != "docker" ]]'

  husky:install:
    deps:
      - :install:npm:husky
    log:
      error: Error installing Husky git hooks
      start: Installing Husky git hooks
    cmds:
      - |
        if [ -d .git ] && [ "${container:=}" != 'docker' ]; then
          {{.NPX_HANDLE}}husky install .config/husky > /dev/null
          .config/log success 'Installed Husky git hooks'
        else
          .config/log warn 'Cannot run `husky install` because there is no `.git/` folder (or this is a Docker container)'
        fi
    status:
      - '[ ! -d .git ] || [[ "${container:=} == "docker" ]]'

  husky:permissions:
    log:
      error: Encountered error while ensuring git hook scripts have the appropriate permissions
      start: Ensuring git hook scripts are executable
      success: Ensured git hook scripts are executable
    cmds:
      - |
        chmod +x .config/log
        if [ -f .config/log ]; then chmod +x .config/log; fi
        while read PATHH; do
          chmod +x "$PATHH"
        done < <(find ./.config/husky/* -maxdepth 0 -type f)
        .config/log success 'Ensured git hook scripts are executable'

  prepare-release:
    deps:
      - :install:npm:standard-version
    desc: Ensure the project has upstream changes, lint, and then update the version
    summary: |
      # Prepare a new release

      This task performs the following tasks in order:

      1. Ensures the project is up-to-date with the latest upstream changes
      2. Lints the project with all available linters
      3. Updates the version of the project in the `package.json` file and other relevant files
      4. Add the appropriate details to the CHANGELOG.md file
    cmds:
      - task: update
      - task: :lint:all
      - '{{.NPX_HANDLE}}standard-version --no-verify'

  requirements:
    deps:
      - :install:modules:global
      - :install:modules:local
      - :install:python:requirements
    desc: Ensure all the dependencies are installed (Node.js, Python, etc.)
    summary: |
      # Ensure dependencies are installed

      This task ensures that packages in various languages (Node.js, Python, etc.) are installed.
      At the very minimum, it will install the Node.js requirements by running `npm install`
      (or `pnpm install`, if configured to do so), install the NPM global dependencies, and
      then install the Python requirements by running `pip3 install -r requirements` after
      initiating a `virtualenv`. In some types of projects, additional types of requirements are
      installed (e.g. Ansible projects also install Ansible Galaxy requirements).
    run: once

  reset:
    desc: Resets the project by removing all caches and updating the project
    summary: |
      # Reset the project and then update it

      This task is intended to be used when the `common:update` task is having trouble
      or when breaking changes are made to the build tools. Use this task if you are
      having trouble with other tasks that are dependent on stale caches. Unlike
      `task common:hard-reset`, this will not remove uncommitted work (assuming your
      work does not reside in folders ignored by the `.gitignore` file).
    cmds:
      - task: clean
      - task: update

  reset-force:
    deps:
      - software:git
    desc: 'Aggressively reset the project (**WARNING** This will wipe uncommitted work)'
    summary: |
      # Aggressively reset the project

      If using `task common:reset` does not fix your issues, you can run this task
      to completely wipe out uncommitted work, clear all the caches, and sync
      with the master branch of both this project and its upstream repositories.
    log:
      error: Failed to reset project back to its HEAD
      start: Forcing project to reset aggressively
      success: Successfully reset project back to its HEAD
    cmds:
      - task: clean
      - git reset --hard HEAD
      - git clean -fxd :/
      - git checkout master
      - git pull origin master --no-rebase
      - bash .config/scripts/start.sh

  shell:
    deps:
      - :install:software:docker
    cmds:
      - task: shell:{{if .CLI_ARGS}}cli{{else}}prompt{{end}}

  shell:cli:
    vars:
      WORKDIR:
        sh: basename $PWD
    log:
      start: Starting a Docker container for `{{.CLI_ARGS}}` and attaching to `/bin/bash`
    cmds:
      - .config/log info 'Running `docker run -it -v "$PWD:/{{.WORKDIR}}" -w /{{.WORKDIR}} --rm megabytelabs/ansible-molecule-{{.CLI_ARGS}}:latest /bin/bash`'
      - cmd: docker run -it -v "$PWD:/{{.WORKDIR}}" -w /{{.WORKDIR}} --rm megabytelabs/ansible-molecule-{{.CLI_ARGS}}:latest /bin/bash
        ignore_error: true

  shell:prompt:
    deps:
      - :install:modules:local
    interactive: true
    env:
      WORKDIR:
        sh: basename $PWD
    cmds:
      - node .config/scripts/prompts/shell.js

  update:
    deps:
      - :common:update:update
