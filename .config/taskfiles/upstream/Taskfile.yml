---
version: '3'

tasks:
  common:
    cmds:
      - task: :upstream:common:reset
      - task: :upstream:common:clone
      - task: :upstream:common:copy
      - task: :upstream:common:merge
      - task: :upstream:common:clean
      - task: :upstream:common:template
      - task: :upstream:common:combine
      - task: :vscode:generate
      - task: :fix:eslint

  commondocs:
    cmds:
      - task: :upstream:commondocs:clone
      - task: :upstream:commondocs:copy
      - task: :upstream:commondocs:clean
      - task: :upstream:commondocs:template
      - task: :vscode:generate
      - task: :fix:eslint

  docs:
    cmds:
      - task: :upstream:docs:clone
      - task: :upstream:docs:copy
      - task: :upstream:docs:merge
      - task: :upstream:docs:clean
      - task: :upstream:docs:template
      - task: :vscode:generate
      - task: :fix:eslint

  project:
    cmds:
      - task: :upstream:project:clone
      - task: :upstream:project:copy
      - task: :upstream:project:clean
      - task: :upstream:project:template
      - task: :upstream:project:boilerplate
      - task: :vscode:generate
      - task: :upstream:project:merge:package:overrides
      - task: :common:update:update
      - task: :fix:eslint

  shared:
    cmds:
      - task: :upstream:shared:copy
      - task: :upstream:shared:variables
      - task: :upstream:shared:template
      - task: :vscode:generate
      - task: :fix:eslint

  template:
    deps:
      - template:handlebars
      - template:hbs

  template:handlebars:
    deps:
      - :install:modules:local
      - :install:npm:hbs
    cmds:
      - |
        function handlebars() {
          FILE="$1"
          TMP="$(mktemp)"
          {{.NPX_HANDLE}}hbs --data .variables.json --helper ./.config/hbs.cjs "$FILE" --stdout > "$TMP"
          mv "$TMP" "${FILE%.*}"
          rm "$FILE"
        }
        find . -type f -not \( {{.ADDITIONAL_IGNORE_FOLDERS}} {{.IGNORE_FOLDERS}} \) -prune -name '*.handlebars' | while read FILE; do
          handlebars "$FILE" &
        done
        find .config -type f -name '*.handlebars' | while read FILE; do
          handlebars "$FILE" &
        done
        wait

  template:hbs:
    deps:
      - :install:modules:local
      - :install:npm:hbs
    env:
      TMP:
        sh: mktemp
    cmds:
      - cp package.json package.json.bak
      - |
        function handlebars() {
          FILE="$1"
          TMP="$(mktemp)"
          {{.NPX_HANDLE}}hbs --data .variables.json --helper ./.config/hbs.cjs "$FILE" --stdout > "$TMP"
          mv "$TMP" "${FILE//.hbs}"
          rm "$FILE"
        }
        find . -type f -not \( {{.ADDITIONAL_IGNORE_FOLDERS}} {{.IGNORE_FOLDERS}} \) -prune -name '*.hbs.*' | while read FILE; do
          handlebars "$FILE" &
        done
        find .config -type f -name '*.hbs.*' | while read FILE; do
          handlebars "$FILE" &
        done
        wait
      - |
        function ensureKeywords() {
          if [ ! -f "$1" ]; then echo "{}" > "$1"; fi
          KEYWORDS="$(jq -r '.keywords' "$1")"
          if [ "$KEYWORDS" == 'null' ] || [ "$KEYWORDS" == '' ]; then
            TMP="$(mktemp)"
            jq -r '.keywords = [] | .' "$1" > "$TMP"
            mv "$TMP" "$1"
          fi
        }
        ensureKeywords package.json.bak
      - jq -s -S --arg blueprint "$(jq -r '.blueprint' package.json.bak)"
        --arg keywords "$(jq '.keywords[]' package.json.bak package.json | jq -s '. | unique')"
        --argjson private "$(jq -r '.private' package.json.bak | sed 's/^null$/true/')"
        --arg version "$(jq -r '.version' package.json.bak | sed 's/^null$/0.0.1/')"
        '.[0] * .[1] | .keywords = ($keywords | fromjson) | .blueprint = ($blueprint | fromjson) | .private = $private | .version = $version | .'
        package.json.bak package.json > "$TMP"
      - mv "$TMP" package.json
      - rm package.json.bak

  variables:
    deps:
      - :install:software:jq
    env:
      TMP:
        sh: mktemp
    cmds:
      - jq --arg blueprint "$(jq -r '.blueprint' package.json | sed 's/^null$/{}/')"
        --arg version "$(jq -r '.version' package.json | sed 's/^null$/0.0.1/')"
        --arg poetry "$(jq -r '.keywords | join("\", \"")' package.json | sed 's/$/"/' | sed 's/^/"/')"
        --arg encoded "$(jq -r '.blueprint.repository.gitlab' package.json | sed 's/https:\/\/gitlab.com\///' | sed 's/\//%252F/g')"
        -S '. = (. * ($blueprint | fromjson)) | .version = $version | .poetryKeywords = $poetry | .gitlab_encoded_path = $encoded'
        '{{.INPUT_FILE}}' > "$TMP"
      - mv "$TMP" {{.OUTPUT_FILE}}
