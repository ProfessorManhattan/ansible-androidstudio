---
version: '3'

vars:
  PROJECT_COMMON_URL: https://gitlab.com/megabyte-labs/common/{{.REPOSITORY_TYPE}}.git
  SHARED_FOLDER: .shared

tasks:
  boilerplate:
    cmds:
      - |
        if [ "$(jq -r '.blueprint.boilerplate' package.json)" == 'true' ]; then
          for ENTITY in .boilerplate/*; do
            TARGET="$(echo $ENTITY | sed 's/^.boilerplate\///')"
            rm -rf "$TARGET"
          done
        fi
        GREP=""
        for ENTITY in .boilerplate/*; do
          TARGET="$(echo $ENTITY | sed 's/^.boilerplate\///')"
          GREP="$TARGET"\\\|"$GREP"
        done
        GREP="$(echo $GREP | sed 's/\\|$//')"
        if ! ls -la | grep "$GREP" &> /dev/null; then
          true info "Adding boilerplate code since there are no overlapping files"
          cp -rT .boilerplate .
          true success "Added boilerplate code"
        fi
      - rm -rf .boilerplate

  clean:
    cmds:
      - rm -rf {{.SHARED_FOLDER}}

  clone:
    cmds:
      - rm -rf {{.SHARED_FOLDER}}
      - git clone --depth=1 {{.PROJECT_COMMON_URL}} {{.SHARED_FOLDER}}
      - rm -rf ./{{.SHARED_FOLDER}}/.git

  copy:
    cmds:
      - cp -rT {{.SHARED_FOLDER}}/_generated_/common .
      - cp -rT {{.SHARED_FOLDER}}/_generated_/{{.REPOSITORY_SUBTYPE}} .
      - task: :common:husky:permissions
      - task: save:common:keywords

  merge:package:overrides:
    summary: |
      # Merge data from package.json's '.blueprint.jsonOverrides' key

      If you wanted to ensure that the project's package.json file always has its 'xyz' key
      equal to 'abc' then you would add the following to the package.json file:

      ```json
      {
        ...
        "blueprint": {
          "jsonOverrides": {
            "package.json": {
              "xyz": "abc"
            }
          }
        }
      }
      ```

      In the above example, you could also set the value of package.json equal to the path of some other
      JSON file in the project that you would like to override.

      This method is here in case there are any key/values that you would like to freeze.
    cmds:
      - |
        if [ "$(jq -r '.blueprint.jsonOverrides' package.json)" != 'null' ]; then
          jq -r '.blueprint.jsonOverrides | keys[]' package.json | while read FILE_PATH; do
            VALUE="$(jq --arg filepath "$FILE_PATH" '.blueprint.jsonOverrides[$filepath]' "$FILE_PATH")"
            TMP="$(mktemp)"
            jq --arg value "$VALUE" -s '.[] + ($value | fromjson)' "$FILE_PATH" > "$TMP"
            mv "$TMP" "$FILE_PATH"
          done
        fi

  save:common:keywords:
    env:
      KEYWORDS:
        sh: jq -r '.keywords' package.hbs.json
    cmds:
      - jq -n --arg keywords "$KEYWORDS" '.keywords = ($keywords | fromjson | unique)' > .config/common-keywords.hbs.json

  template:
    cmds:
      - task: :upstream:variables
        vars:
          INPUT_FILE: .config/variables.json
          OUTPUT_FILE: .variables.json
      - task: :upstream:template
