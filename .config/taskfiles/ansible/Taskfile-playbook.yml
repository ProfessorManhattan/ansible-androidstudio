---
version: '3'

tasks:
  docs:
    deps:
      - :install:npm:leasot
    summary: |
      ```shell
      # @description Processes leasot data and returns .variables.json data including charts written in @appnest/readme format
      #
      # @arg $1 The file that the leasot JSON was written to
      # @arg $2 The tag being processed
      function populateChartVar() {
        ...
      }
      ```
    vars:
      DOC_IDS: '@binary,@brew,@cask,@chrome,@firefox,@gem,@helm,@npm,@pypi,@vscode'
    cmds:
      - |
        function populateChartVar() {
          CHART='[["Package", "Description"]'
          jq --arg tag "$(echo $2 | tr '[a-z]' '[A-Z]')" -r '.[] | select(.tag == $tag) | .
          | del(. ["file", "ref", "line", "tag"]) | .text' "$1" | while read COMMENT; do
            if [ "$CHART" != '[' ]; then
              CHART="${CHART},"
            fi
            LINK="$(echo $COMMENT | sed 's/ - .*//')"
            DESCRIPTION="$(echo $COMMENT | sed 's/.* - //' | sed 's/\"/\\\"/g')"
            CHART="${CHART}[\"**$LINK**\",\"$DESCRIPTION\"]"
          done
          CHART="${CHART}]"
          TMP_CHART="$(mktemp)"
          KEY="$(echo $2 | sed 's/^@//')"
          jq --arg chart "$CHART" --arg key "${KEY}_var_chart" '.[$key] = ($chart | fromjson)' .variables.json > "$TMP_CHART"
          mv "$TMP_CHART" .variables.json
        }
        TMP="$(mktemp)"
        leasot --tags '{{.DOC_IDS}}' --reporter json './environments/prod/group_vars/**/*.yml' > "$TMP" || true
        VARIABLES_JSON="$(jq '.' .variables.json)"
        for ID in {{replace "," " " .DOC_IDS}}; do
          populateChartVar "$TMP" "$ID"
        done
        .config/log success 'Finished scanning for documentation comments'

  environment:
    # @desc_when [ansible/Taskfile-playbook.yml] ansible/playbook
    desc: Prompts for which environment to use and then symlinks to it
    summary: |
      # Switch environments using an interactive dialogue

      Ansible does not really provide any great ways to switch between environments (or sets of
      `host_vars/`, `group_vars/` etc.). If you place all the files and folders you wish to constitute
      as an environment inside a folder named as the name of the environment then you can use
      this task to handle the symlinking and switching between environments.

      **Example of opening the interactive prompt:**
      `task ansible:environment`

      **You can directly switch enironments to `environments/prod/` by running:**
      `task ansible:environment -- prod`
    cmds:
      - task: environment:{{if .CLI_ARGS}}cli{{else}}prompt{{end}}

  environment:cli:
    cmds:
      - |
        {{if .CLI_ARGS}}
          for ITEM in environments/{{.CLI_ARGS}}/*; do
            ITEM="$(echo $ITEM | sed 's/.*\///')"
            rm -f $ITEM
            ln -s "./environments/{{.CLI_ARGS}}/$ITEM" "$ITEM"
            .config/log success "Successfully symlinked `$ITEM` from ./environments/{{.CLI_ARGS}}/$ITEM"
          done
        {{end}}

  environment:prompt:
    deps:
      - :install:modules:local
    interactive: true
    cmds:
      - node .config/scripts/prompts/environment.js

    preconditions:
      - sh: test -d node_modules
        msg: This task has dependencies in the `node_modules` folder which is missing.

  find-missing:
    # @desc_when [ansible/Taskfile-playbook.yml] ansible/playbook
    desc: Find roles that are missing files
    summary: |
      # Find roles that are missing any given file

      This task scans through all the folders in the roles/ directory and checks
      for the presence of a file that you pass in through the CLI.

      **Example usage:**
      `task find-missing -- logo.png`

      The example above will look through all the folders two levels deep (e.g. `./roles/tools/nmap`,
      `./roles/system/snapd`) in the roles folder and display any roles that are missing the file.
    cmds:
      - |
        FILES=$(find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/{{.CLI_ARGS}}" ';' -print)
        .config/log info 'Found '"$(echo "$FILES" | wc -l | xargs)"' roles missing {{.CLI_ARGS}}'
        echo "$FILES"
    preconditions:
      - sh: test -d roles
        msg: The `roles/` folder is missing. Is the project set up right?

  remotes:
    deps:
      - :install:software:git
      - :install:software:jq
    summary: |
      # Ensures each role is added as a remote

      This task cycles through all the roles in the `/roles` folder and ensures
      they are added as remotes. This helps with managing the git trees used
      for combining the many role repositories into the playbook mono-repository.

      It also adds a remote for a private submodule that is intended to store
      files that are not meant to be shared. The remote is named `private`.
    run: once
    cmds:
      - git init -q
      - |
        for ROLE_RELATIVE_PATH in roles/*/*; do
          if [ -f "${ROLE_RELATIVE_PATH}/package.json" ]; then
            ROLE_FOLDER="$(basename $ROLE_RELATIVE_PATH)"
            ROLE_HTTPS_REPO="$(jq -r '.blueprint.repository.gitlab' $ROLE_RELATIVE_PATH/package.json)"
            ROLE_SSH_REPO="$(echo $ROLE_HTTPS_REPO | sed 's/https:\/\/gitlab.com\//git@gitlab.com:/' | sed 's/$/.git/')"
            if git config "remote.${ROLE_FOLDER}.url" > /dev/null; then
              git remote set-url "$ROLE_FOLDER" "$ROLE_SSH_REPO"
            else
              git remote add "$ROLE_FOLDER" "$ROLE_SSH_REPO"
            fi
          else
            .config/log warn "${ROLE_RELATIVE_PATH}/package.json is missing!"
          fi
        done
        .config/log success 'Finished adding git remotes for the roles in the ./roles folder'

  run:
    cmds:
      - task: run:{{if .CLI_ARGS}}cli{{else}}prompt{{end}}

  run:cli:
    cmds:
      - 'true'

  run:prompt:
    cmds:
      - node .config/scripts/prompts/playbook.js
