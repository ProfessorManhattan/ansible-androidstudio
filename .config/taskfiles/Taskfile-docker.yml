---
version: '3'

vars:
  DOCKERHUB_PROFILE: megabytelabs

tasks:
  build:all:
    cmds:
      - task: build:fat
      - task: build:slim

  build:fat:
    deps:
      - :install:software:docker
      - :install:software:jq
    desc: Build a Docker container from the Dockerfile
    summary: |
      # Build a Docker container from the Dockerfile

      This task builds a normal Docker container. It expects the Dockerfile to be
      named `Dockerfile` and for it to be in the root of the repository.

      For more information on building Docker containers, see [Docker's build guide](https://docs.docker.com/engine/reference/commandline/build/)
    vars:
      BUILD_DATE:
        sh: git show -s --format=%cI
      REVISION:
        sh: git rev-parse HEAD
      SLUG:
        sh: jq -r '.blueprint.slug' package.json
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - docker build --build-arg BUILD_DATE="{{.BUILD_DATE}}" --build-arg REVISION="{{.REVISION}}" --build-arg VERSION="{{.VERSION}}"
        --tag {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:latest --tag {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:{{.VERSION}} .
    # log:
    #   error: Failed to build "fat" image
    #   start: 'Building regular image named `{{.DOCKERHUB_PROFILE}}/{{.SLUG}}`'
    #   success: Successfully built "fat" image
    sources:
      - Dockerfile
      - package.json

  build:slim:
    deps:
      - :install:software:docker
      - :install:software:dockerslim
    desc: Build a slim version of the Docker image
    summary: |
      # Build a compressed and secure container from the `regular` Docker image

      This task takes the Docker container generated by running `task build:normal` and
      compresses it using DockerSlim. Compressing it actually makes the container more
      secure too because there is a smaller attack surface with unnecessary tools and services
      removed.

      For more information, see [DockerSlim's GitHub page](https://github.com/docker-slim/docker-slim).
    cmds:
      - task: build:fat
      - task: build:slim:command
      - task: build:slim:finish
    sources:
      - Dockerfile
      - package.json

  build:slim:command:
    vars:
      SLIM_COMMAND:
        sh: jq -r '.blueprint.dockerslim_command' package.json
      SLUG:
        sh: jq -r '.blueprint.slug' package.json
    cmds:
      - docker-slim build --tag '{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim' {{.SLIM_COMMAND}} '{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:latest'
    # log:
    #   error: 'Failed to build `{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim`'
    #   start: 'Building slim image named `{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim`'
    #   success: 'Successfully built `{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim`'
    sources:
      - Dockerfile
      - package.json

  build:slim:finish:
    deps:
      - build:slim:prettier
      - build:slim:sizes

  build:slim:prettier:
    deps:
      - :install:npm:prettier
    cmds:
      - '{{.NPX_HANDLE}}prettier --write slim.report.json'
    sources:
      - slim.report.json

  build:slim:sizes:
    deps:
      - :install:software:docker
      - :install:software:jq
    vars:
      PREVIOUS_SLIM_SIZE:
        sh: jq -r '.blueprint.slim_size' package.json
      REGULAR_SIZE:
        sh: 'docker manifest inspect -v "{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:latest" | grep size | awk -F ":" "{sum+=$NF} END {print sum}"
          | awk "{$1=$1/(1024^2); print $1,\"MB\";}"'
      SLIM_SIZE:
        sh: 'docker manifest inspect -v "{{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim" | grep size | awk -F ":" "{sum+=$NF} END {print sum}"
          | awk "{$1=$1/(1024^2); print $1,\"MB\";}"'
    env:
      TMP:
        sh: mktemp
    cmds:
      - jq --arg a "{{.SLIM_SIZE}}" '.blueprint.slim_size = $a' package.json > "$TMP"
      - mv "$TMP" package.json
      - task: :common:update:update
    # log:
    #   success: 'The slim build was compressed to `{{.SLIM_SIZE}}` (from `{{.REGULAR_SIZE}}` originally).'
    status:
      - '[[ "{{.PREVIOUS_SLIM_SIZE}}" == "{{.SLIM_SIZE}}" ]]'

  standard-version:prebump:
    cmds:
      - |
        if grep -q "CMD.\[\"--version\"\]" Dockerfile; then
          VERSION=$(docker run --cap-drop=ALL -e PY_COLORS=0 --rm megabytelabs/shellcheck:latest | perl \
            -pe 'if(($v)=/([0-9]+([.][0-9]+)+)/){print"$v";exit}$_=""')
          if [[ $VERSION == *.*.* ]]; then
            echo $VERSION
          elif [[ $VERSION == *.* ]]; then
            echo $VERSION.0
          fi
        fi

  standard-version:prerelease: git add --all

  standard-version:pretag:
    vars:
      PACKAGE_VERSION:
        sh: cat package.json | grep version | head -1 | awk -F':' '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]'
    cmds:
      - |
        if git show-ref --tags 'v{{.PACKAGE_VERSION}}' --quiet; then
          git tag -d 'v{{.PACKAGE_VERSION}}'
        fi

  test:slim:
    deps:
      - :install:software:docker
      - :install:software:dockerslim
      - :install:software:jq
    vars:
      DOCKER_COMMAND:
        sh: jq -r '.docker_command' .variables.json
      SLUG:
        sh: jq -r '.slug' .variables.json
    cmds:
      - |
        if [[ "{{.DOCKER_COMMAND}}" != 'null' ]]; then
          for TEST_SCENARIO in slim_test/*/; do
            true info 'Capturing output from the `latest` image for the `'"$TEST_SCENARIO"'` scenario'
            LATEST_OUTPUT=$(docker run -v "${PWD}/${TEST_SCENARIO}:/work" -w /work {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:latest {{.DOCKER_COMMAND}})
            true info 'Capturing output from the `slim` image for the `'"$TEST_SCENARIO"'` scenario'
            SLIM_OUTPUT=$(docker run -v "${PWD}/${TEST_SCENARIO}:/work" -w /work {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim {{.DOCKER_COMMAND}})
            if [ "$LATEST_OUTPUT" == "$SLIM_OUTPUT" ]; then
              true success "The 'slim' and 'latest' image outputs match for the '$TEST_SCENARIO' scenario."
            else
              true error 'The output from the `slim` image does not match the output from the `latest` image for the `'"$TEST_SCENARIO"'` scenario.'
              exit 1
            fi
          done
        fi
    # log:
    #   error: Encountered error while testing the test scenarios in the `slim_test/` folder
    #   success: The output from both the `latest` and `slim` container are the same for all the test scenarios in `slim_test/`
    status:
      - test ! -d slim_test
    preconditions:
      - sh: '[[ "$(docker images -q {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:slim 2> /dev/null)" != "" ]]'
        msg: The slim image has not been built yet. Try running `task build`.
      - sh: '[[ "$(docker images -q {{.DOCKERHUB_PROFILE}}/{{.SLUG}}:latest 2>/dev/null)" == "" ]]'
        msg: The regular image has not been built yet. Try running `task build`.

  update:labels:
    deps:
      - :install:software:jq
    vars:
      GROUP_URL:
        sh: jq -r '.repository.group.dockerfile' .variables.json
    cmds:
      - task: update:labels:add
      - task: update:labels:{{OS}}
    sources:
      - .variables.json
      - Dockerfile
      - package.json
    preconditions:
      - sh: test -f Dockerfile
        msg: A `Dockerfile` is not present in the root of this project!
      - sh: test -f .variables.json
        msg: The `.variables.json` file is not present in the root of this project!
      - sh: test -f package.json
        msg: The `package.json` file is not present in the root of this project!

  update:labels:add:
    vars:
      AUTHORS:
        sh: jq -r '.docker_label_authors' .variables.json
      HELP_EMAIL:
        sh: jq -r '.email.help' .variables.json
      LICENSE:
        sh: jq -r '.license' .variables.json
      ORGANIZATION:
        sh: jq -r '.organization' .variables.json
      URL:
        sh: jq -r '.link.home' .variables.json
    cmds:
      - |
        if ! grep 'org.opencontainers.image.documentation' Dockerfile; then
          echo 'ARG BUILD_DATE' >> Dockerfile
          echo 'ARG REVISION' >> Dockerfile
          echo 'ARG VERSION' >> Dockerfile
          echo '' >> Dockerfile
          echo 'LABEL maintainer="{{.ORGANIZATION}} <{{.HELP_EMAIL}}>"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.authors="{{.AUTHORS}}"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.created=$BUILD_DATE' >> Dockerfile
          echo 'LABEL org.opencontainers.image.description="[[ Injected by running `task update` ]]"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.documentation="[[ Injected by running `task update` ]]"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.licenses="{{.LICENSE}}"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.revision=$REVISION' >> Dockerfile
          echo 'LABEL org.opencontainers.image.source="[[ Injected by running `task update` ]]"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.url="{{.URL}}"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.vendor="{{.ORGANIZATION}}"' >> Dockerfile
          echo 'LABEL org.opencontainers.image.version=$VERSION' >> Dockerfile
          echo 'LABEL space.megabyte.type="{{.REPOSITORY_SUBTYPE}}"' >> Dockerfile
          echo '' >> Dockerfile
        fi
    status:
      - grep 'org.opencontainers.image.documentation' Dockerfile

  update:labels:darwin:
    vars:
      GROUP_URL:
        sh: jq -r '.repository.group.dockerfile' .variables.json
    env:
      DESCRIPTION:
        sh: jq -r '.description' package.json
    cmds:
      # yamllint disable rule:line-length
      # eslint-disable max-len
      - sed -i .bak "s^.*org.opencontainers.image.description.*^LABEL org.opencontainers.image.description=${DESCRIPTION}^g" Dockerfile && rm Dockerfile.bak
      - sed -i .bak "s^.*org.opencontainers.image.documentation.*^LABEL org.opencontainers.image.documentation=\"{{.GROUP_URL}}/{{.REPOSITORY_SUBTYPE}}/{{.SLUG}}/-/blob/master/README.md\"^g" Dockerfile && rm Dockerfile.bak
      - sed -i .bak "s^.*org.opencontainers.image.source.*^LABEL org.opencontainers.image.source=\"{{.GROUP_URL}}/{{.REPOSITORY_SUBTYPE}}/{{.SLUG}}.git\"^g" Dockerfile && rm Dockerfile.bak
      # yamllint enable rule:line-length eslint-enable max-lens
      # eslint-enable max-len

  update:labels:linux:
    vars:
      GROUP_URL:
        sh: jq -r '.repository.group.dockerfile' .variables.json
      SLUG:
        sh: jq -r '.blueprint.slug' package.json
    env:
      DESCRIPTION:
        sh: jq -r '.description' package.json
    cmds:
      # yamllint disable rule:line-length
      # eslint-disable max-len
      - sed -i "s^.*org.opencontainers.image.description.*^LABEL org.opencontainers.image.description=${DESCRIPTION}^g" Dockerfile
      - sed -i "s^.*org.opencontainers.image.documentation.*^LABEL org.opencontainers.image.documentation={{.GROUP_URL}}/{{.REPOSITORY_SUBTYPE}}/{{.SLUG}}/-/blob/master/README.md\"^g" Dockerfile
      - sed -i "s^.*org.opencontainers.image.source.\*^LABEL org.opencontainers.image.source={{.GROUP_URL}}/{{.REPOSITORY_SUBTYPE}}/{{.SLUG}}.git\"^g" Dockerfile
      # yamllint enable rule:line-length
      # eslint-enable max-len
